---
layout: post
title:  "Leveldb 源码分析 - 抽象综述"
date:   2021-04-26 19:08:24 +0800
categories: jekyll update
---

#### DB

```
|****************************************************|
|                     DB  (DBImpl)                   |
|*************************************************** |
| Log File |   MemTable(mem/imm) |    VersionSet     |
|*************************************************** |
|                       |     Version(sst files)     |
|*************************************************** |
```
<font color='red'> A DB is a persistent ordered map from keys to values. </font>
<br/>

#### LOG_FORMAT

```
|****************************************|
|                Log File                |
|****************************************|
|   LogWriter       |    LogReader       |
|****************************************|
|                Record                  |
|****************************************|
|       Fragment (FULL/MIDDLE/…)         |
|****************************************|
```
<br/>

#### VERSION_SET

```
|****************************************|           
|          VersionSet(last_seq)          |				
|****************************************|				
|      Version     |     VersionEdit     |				
|****************************************|
|     TableCache   |      Log File       |
|****************************************|
|    TableIterator |                     |
|****************************************|
```

* version-edit 持久化数据结构，  version 为内存数据结构，双向链表。

* TableCache cache的file handle/table handle。

<font color='red'>思考：</font>	

1. 目前的version_set 对应的LOG,只有db open的时候才可能开一个新的manifest_file, 且持久化某个较新版本的version + version edit。

2. apply version edit感觉做麻烦了，直接copy一份vector 然后  insert/earse 不就完了？ 现在for …push_back 觉得不够简洁。

3. 其中versionset 中保存全局的Meta 一个状态，存在version_edit中，注意这里不是同memtable 的log以及对应的max_seq对齐的。

4. 功能上是没问题的，即recovery本身就是要找一个max_seq 而已， gap 一点无所谓（比如全局刚被写拿完seq,同时version_edit也拿了，此时version_edit log on disk了，但是写的数据还没wal成功。）

<br/>

#### TABLE_BUILDER/ITERATOR

```
|*************************************************************************************|
|                      TableBuilder                   |TableIterator(TwoLevelIterator)|
|*************************************************************************************|
|BlockBuilder(data/index/metaindex)|FilterBlockBuilder|	   BlockIterator(Index/Data)  |
|*************************************************************************************|
|                    Format (SSTFile)                 |        LRUCache               |
|*************************************************************************************|
```

<font color='red'>思考：</font>	

1. 这里的 TwoLevelIterator 可以等价描述为 一个sst file iterator。

2. leveldb的设计是一个table 划分的足够小，所以一个table 对应一个index_block,  filter_block，且生命周期同table一致，table open/dtor 其跟随着创建与销毁，只有data_block是read+lru_cache 的，且注意lru_cache 需要管理handle的ref.  而cache_handle 是block_iterator的析构进行管理。

<br/>

#### ITERATOR

```
|*********************************************|
|                     DBIter                  |
|*********************************************|
|                 MergingIterator             | 
|*********************************************|
|     MemTableIterator |    TwoLevelIterator  |
|*********************************************|
|                      | LevelFileNumIterator |
|*********************************************|
```

* MergingIterator吐出的是全版本, DBIter 执行了关键的FindNextUserEntry/FindPrevUserEntry, 进行 seq 过滤以及 相同user_key的 Entry hidden。

* 数据在磁盘上的物理顺序为， order by user_key asc, seq desc。

* MergingIterator 这一层注册了version 的 Unref callback, 即MergingIterator 析构时候触发。

<font color='red'>思考：</font>	

1. TwoLevelIterator 的设计有点巧妙，其中用到了两层关系.
    - level files 抽象为Iterator， 通过level file iterator ->  file iterator(table iterator)。
    - table iterator 也是两级iterator，即通过 index_block_iterator ->  data_block_iterator。
    - 其中Iterator 的Next / Prev 设计还是很巧妙的, 通过一个direction来标识当前的state是属于哪个方向的。

<br/>

#### 参考文献

1. [Log format][log-format]

[log-format]: https://github.com/google/leveldb/blob/master/doc/log_format.md
