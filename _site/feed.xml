<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-07-19T13:02:17+08:00</updated><id>/feed.xml</id><title type="html">Charming code world</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">seastar - notes[WIP]</title><link href="/jekyll/update/2021/05/25/seastar-notes.html" rel="alternate" type="text/html" title="seastar - notes[WIP]" /><published>2021-05-25T10:43:24+08:00</published><updated>2021-05-25T10:43:24+08:00</updated><id>/jekyll/update/2021/05/25/seastar-notes</id><content type="html" xml:base="/jekyll/update/2021/05/25/seastar-notes.html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;h2 id=&quot;asynchronous-programming&quot;&gt;Asynchronous programming&lt;/h2&gt;

&lt;p&gt;share data vs share nothing&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;减少负面影响 cache line bouncing and memory fences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;异步服务编程遇到的两大挑战&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;复杂性：很长的回调链&lt;/li&gt;
  &lt;li&gt;非阻塞：依然存在阻塞函数需要引入多线程，比如基于disk io的读写实现，比如mmap
此外需要考虑&lt;/li&gt;
  &lt;li&gt;现代机器：多core和多层级的memory (L1 cache -&amp;gt; memory) ,  悲观思想-不可扩展的lock，乐观思想-共享内存/无锁机制（原子操作/内存屏障）但是对性能影响也是不能忽略，尤其core的扩展也是有限制的&lt;/li&gt;
  &lt;li&gt;编程语言：高级语言，比如java, js 以及类似的现代语言是方便使用的，但是每个语言的设计都有与上面列出的问题进行解决。但是这些语言考虑了可移植，所以给开发者关键的代码少了一些控制权利。而对于真正的性能优化，我们需要一个编程语言可以提供开发者完全的控制，以及无运行时损耗的语言。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于上面的挑战进而提出了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seastar&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;seastar&quot;&gt;Seastar&lt;/h2&gt;

&lt;p&gt;Seastar是一个应用框架，它几乎将操作系统所提供的抽象完整地搬移到了用户态中，以减少操作系统的抽象开销，实现软硬件一体化。&lt;a href=&quot;http://www.scylladb.com/&quot;&gt;Scylla&lt;/a&gt; 基于Seasatr开发——一个类似Apache Cassandra的高性能NoSql database。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The [obj = ...] capture syntax we used here is new to C++14. This is the main reason why Seastar requires C++14, and does not support older C++11 compilers.&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;重要特性&quot;&gt;重要特性&lt;/h1&gt;

&lt;h2 id=&quot;share-nothing&quot;&gt;Share nothing&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;future-and-promisefpc&quot;&gt;Future and Promise(fpc)&lt;/h2&gt;

&lt;h3 id=&quot;ready_future&quot;&gt;ready_future&lt;/h3&gt;
&lt;p&gt;如果一个 future 在当下就已经有结果了，不必等到未来某个时刻， 我们把这个 future 称为 ready_future。&lt;/p&gt;

&lt;p&gt;ready_future 的不同之处在于:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. ready_future 可以单独使用，不必关联一个promise；
2. ready_future.then(lambda) 会把传入的lambda立即执行掉， 也就是说这个lambda没有机会放入任务队列；
3. 而not_ready_future每次执行，产生的新任务都会被放入任务队列，然后依此取出来执行。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;do_with&quot;&gt;do_with&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;seastar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// wrong! will be destroyed too soon!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_with&lt;/code&gt; saves the given object on the heap, and calls the given lambda with a reference to the new object. Finally it ensures that the new object is destroyed after the returned future is resolved. Usually, do_with is given an rvalue, i.e., an unnamed temporary object or an std::move()ed object, and do_with moves that object into its final place on the heap. do_with returns a future which resolves after everything described above is done (the lambda’s future is resolved and the object is destroyed).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;seastar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seastar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// obj is passed by reference to slow_op, and this is fine:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slow_op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;message-passing&quot;&gt;Message passing&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;high-performance-networking&quot;&gt;High-performance networking&lt;/h2&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scylladb.com/&quot;&gt;ScyllaDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38771059&quot;&gt;用户态操作系统之一 Seastar简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.seastar.io/master/split/index.html&quot;&gt;Asynchronous Programming with Seastar&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">前言</summary></entry><entry><title type="html">kubernetes - notes[WIP]</title><link href="/jekyll/update/2021/05/12/kubernetes-notes.html" rel="alternate" type="text/html" title="kubernetes - notes[WIP]" /><published>2021-05-12T10:08:24+08:00</published><updated>2021-05-12T10:08:24+08:00</updated><id>/jekyll/update/2021/05/12/kubernetes-notes</id><content type="html" xml:base="/jekyll/update/2021/05/12/kubernetes-notes.html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;kubernetes 是希腊文，意思是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;舵手&lt;/code&gt;，带领我们安全地到达未知水域。首次接触基本了解是一个容器编排系统，但是有人称其为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;数据中心操作系统&lt;/code&gt;，不解，故来进一步探索未知水域。&lt;/p&gt;

&lt;p&gt;目前了解到的k8s诞生的背景，得益于微服务理念的兴起，由&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;垂直扩容&lt;/code&gt;改进为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;水平扩容&lt;/code&gt;，当系统整体负载上升，需要弹性扩容的时候，如果是单体应用，那么扩容的成本大概率很大，因为可能仅仅是某个局部的处理逻辑产生了资源瓶颈需要扩容，比如磁盘、内存或者CPU,此时如果将单体系统，按照功能合理的拆分，在用户侧能直观的受益点就是，扩容成本可以下降，比如给耗CPU更多的处理微服务扩容计算机型或者给占用更多磁盘空间的微服务扩展存储机型； 从研发视角，架构更合理，每个微服务可以各自迭代。&lt;/p&gt;

&lt;h1 id=&quot;重要概念&quot;&gt;重要概念&lt;/h1&gt;

&lt;h2 id=&quot;pod&quot;&gt;POD&lt;/h2&gt;

&lt;p&gt;为何需要pod关于为何需要pod这种容器？为何不直接使用容器？为何甚至需要同时运行多个容器？难道不能简单地把所有进程都放在一个单独的容器中吗？&lt;/p&gt;

&lt;p&gt;接下来我们将一一回答上述问题。为何多个容器比单个容器中包含多个进程要好想象一个由多个进程组成的应用程序，无论是通过ipc（进程间通信）还是本地存储文件进行通信，都要求它们运行于同一台机器仁。在Kubemetes中，我们经常在容器中运行进程，由于每一个容器都非常像一台独立的机器，此时你可能认为在单个容器中运行多个进程是合乎逻辑的，然而在实践中这种做法并不合理。&lt;font color=&quot;red&quot;&gt;容器被设计为每个容器只运行一个进程（除非进程本身产生子进程）。如果在单个容器中运行多个不相关的进程，那么保持所有进程运行、管理它们的日志等将会是我们的责任。&lt;/font&gt;例如，我们需要包含一种在进程崩溃时能够自动重启的机制。同时这些进程都将记录到相同的标准输出中，而此时我们将很难确定每个进程分别记录了什么。综上所述，我们需要让每个进程运行于自己的容器中，而这就是&lt;font color=&quot;red&quot;&gt;Docker和Kubernetes期望使用的方式&lt;/font&gt;。&lt;/p&gt;

&lt;p&gt;pod 也是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;扩缩容的基本单位&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;对于在生产中运行的pod，一定要定义一个存活探针&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;livenessProbe&lt;/code&gt;。没有探针的话，Kubernetes无法知道你的应用是否还活着。只要进程还在运行，Kubernetes会认为容器是健康。同样每个pod也可能有自己的owner，owner级联的GC策略，见文件2。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;volume&quot;&gt;Volume&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;service&quot;&gt;Service&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;replicaset&quot;&gt;ReplicaSet&lt;/h2&gt;
&lt;p&gt;了解ReplicaController，但是使用ReplcaSet 而不是ReplicaController&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;statefulset&quot;&gt;StatefulSet&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;crd&quot;&gt;CRD&lt;/h2&gt;

&lt;h3 id=&quot;schema&quot;&gt;schema&lt;/h3&gt;

&lt;h3 id=&quot;event&quot;&gt;event&lt;/h3&gt;

&lt;h3 id=&quot;envtest&quot;&gt;envtest&lt;/h3&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://product.dangdang.com/26439199.html&quot;&gt;Kubernetes in action 中文版&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/&quot;&gt;Owners and dependents&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.kubebuilder.io/introduction.html&quot;&gt;Kubebuilder&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">前言</summary></entry><entry><title type="html">Leveldb 源码分析 - snapshot</title><link href="/jekyll/update/2021/05/05/leveldb-snapshot.html" rel="alternate" type="text/html" title="Leveldb 源码分析 - snapshot" /><published>2021-05-05T21:22:24+08:00</published><updated>2021-05-05T21:22:24+08:00</updated><id>/jekyll/update/2021/05/05/leveldb-snapshot</id><content type="html" xml:base="/jekyll/update/2021/05/05/leveldb-snapshot.html">&lt;h3 id=&quot;api&quot;&gt;API&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetSnapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;MutexLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshots_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;versions_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DBImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReleaseSnapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;MutexLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;snapshots_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SnapshotImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;snapshot-使用者视角&quot;&gt;SnapShot 使用者视角&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;不能指定时间点，仅支持当前的时间点的snapshot构建，因为历史数据有可能已经被compact。&lt;/li&gt;
  &lt;li&gt;某个snapshot对应的时间点的存量数据读取，可以用来数据比较/存量数据的索引构建。&lt;/li&gt;
  &lt;li&gt;存量数据依然可以TTL （看设计的snapshot语义）&lt;/li&gt;
  &lt;li&gt;leveldb的实现的snapshot的未持久化&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;snapshot-设计&quot;&gt;SnapShot 设计&lt;/h3&gt;

&lt;p&gt;Snapshot的设计核心在于compact中对于GC策略的影响。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snapshots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smallest_snapshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;versions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastSequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smallest_snapshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshots_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;versions_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MakeInputIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SequenceNumber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_sequence_for_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kMaxSequenceNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// Handle key/value, add to state, etc.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseInternalKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Do not hide error keys&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;current_user_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;has_current_user_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;last_sequence_for_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kMaxSequenceNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_current_user_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;user_comparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;Slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_user_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// First occurrence of this user key&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current_user_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ikey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;has_current_user_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;last_sequence_for_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kMaxSequenceNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// 在非多version的系统下，同一个row key的不同version，&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 在一个snapshot内仅保留当前snapshot内最大version即可。&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_sequence_for_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smallest_snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Hidden by an newer entry for same user key&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// (A)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kTypeDeletion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;ikey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smallest_snapshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsBaseLevelForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ikey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// kTypeDeletion的userkey的purge策略，只有保证其他未参与的sstfile，&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 不再需要此delete marker 才可以purge。&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// For this user key:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (1) there is no data in higher levels&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (2) data in lower levels will have larger sequence numbers&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (3) data in layers that are being compacted here and have&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//     smaller sequence numbers will be dropped in the next&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//     few iterations of this loop (by rule (A) above).&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Therefore this deletion marker is obsolete and can be dropped.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;last_sequence_for_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ikey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重要的data gc逻辑 以及delete marker purge策略；&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;data(非delete marker), 仅保留在 smallest_snapshot中的最大version( max_versions = 1)&lt;/li&gt;
  &lt;li&gt;delete marker （要判断这个是当前smallest_snapshot中的最大version的row，且保证high level 无data，即后面没有比这个小的version 的row 需要被此row delete marker gc的数据。）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;讨论&quot;&gt;讨论&lt;/h3&gt;
&lt;p&gt;有了snapshot 全局的计算逻辑/比如preAgg/rollup/delete-marker/data gc 都要考虑对snapshot的影响。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基于seq的snapshot（行级别）
    &lt;ul&gt;
      &lt;li&gt;优点：内存空间占用少，一个snapshot仅记录一个seq即可，且不依赖mem-flush/compact pic，但是依赖seq;&lt;/li&gt;
      &lt;li&gt;缺点：空间放大较大（如果想GC的更有效，GC策略复杂度大，所有的snapshot下的同一个userkey的最大version都要保留）
 仅分了两个组，一个是 &amp;lt;= smallest_snapshot_seq 一个是&amp;gt; smallest_snapshot_seq 数据集；且需要针对单user_key的gc策略产生影响——由于snapshot_seq的存在，导致compact中的delete marker 不能轻易删除了，只能判断大level无此数据才能delete.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基于fileset的snapshot(文件级别)
create snapshot时候trigger flush mem，一个snapshot为file list, 且持久化到manifest中
    &lt;ul&gt;
      &lt;li&gt;优点：不依赖seq，因为在compact pick时候已经sst file分组，所以不影响compact的user-key gc逻辑就能较彻底的GC;相比基于行的snapshot,因为snapshot引入的空间放大小（基于行级别GC时候，仅以最小sapshot为界，try gc 老部分数据的集合；而基于fileset的可以多个fileset try gc）。&lt;/li&gt;
      &lt;li&gt;缺点：影响compact pick, 如果snapshot 过多会存在大量文件无法进行compact，导致文件数过多。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">API</summary></entry><entry><title type="html">Leveldb 源码分析 - 抽象综述</title><link href="/jekyll/update/2021/04/26/leveldb.html" rel="alternate" type="text/html" title="Leveldb 源码分析 - 抽象综述" /><published>2021-04-26T19:08:24+08:00</published><updated>2021-04-26T19:08:24+08:00</updated><id>/jekyll/update/2021/04/26/leveldb</id><content type="html" xml:base="/jekyll/update/2021/04/26/leveldb.html">&lt;h4 id=&quot;db&quot;&gt;DB&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|****************************************************|
|                     DB  (DBImpl)                   |
|*************************************************** |
| Log File |   MemTable(mem/imm) |    VersionSet     |
|*************************************************** |
|                       |     Version(sst files)     |
|*************************************************** |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;font color=&quot;red&quot;&gt; A DB is a persistent ordered map from keys to values. &lt;/font&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;log_format&quot;&gt;LOG_FORMAT&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|****************************************|
|                Log File                |
|****************************************|
|   LogWriter       |    LogReader       |
|****************************************|
|                Record                  |
|****************************************|
|       Fragment (FULL/MIDDLE/…)         |
|****************************************|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;version_set&quot;&gt;VERSION_SET&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|****************************************|           
|          VersionSet(last_seq)          |				
|****************************************|				
|      Version     |     VersionEdit     |				
|****************************************|
|     TableCache   |      Log File       |
|****************************************|
|    TableIterator |                     |
|****************************************|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;version-edit 持久化数据结构，  version 为内存数据结构，双向链表。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;TableCache cache的file handle/table handle。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;font color=&quot;red&quot;&gt;思考：&lt;/font&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;目前的version_set 对应的LOG,只有db open的时候才可能开一个新的manifest_file, 且持久化某个较新版本的version + version edit。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;apply version edit感觉做麻烦了，直接copy一份vector 然后  insert/earse 不就完了？ 现在for …push_back 觉得不够简洁。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其中versionset 中保存全局的Meta 一个状态，存在version_edit中，注意这里不是同memtable 的log以及对应的max_seq对齐的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;功能上是没问题的，即recovery本身就是要找一个max_seq 而已， gap 一点无所谓（比如全局刚被写拿完seq,同时version_edit也拿了，此时version_edit log on disk了，但是写的数据还没wal成功。）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;table_builderiterator&quot;&gt;TABLE_BUILDER/ITERATOR&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|*************************************************************************************|
|                      TableBuilder                   |TableIterator(TwoLevelIterator)|
|*************************************************************************************|
|BlockBuilder(data/index/metaindex)|FilterBlockBuilder|	   BlockIterator(Index/Data)  |
|*************************************************************************************|
|                    Format (SSTFile)                 |        LRUCache               |
|*************************************************************************************|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;font color=&quot;red&quot;&gt;思考：&lt;/font&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;这里的 TwoLevelIterator 可以等价描述为 一个sst file iterator。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;leveldb的设计是一个table 划分的足够小，所以一个table 对应一个index_block,  filter_block，且生命周期同table一致，table open/dtor 其跟随着创建与销毁，只有data_block是read+lru_cache 的，且注意lru_cache 需要管理handle的ref.  而cache_handle 是block_iterator的析构进行管理。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;iterator&quot;&gt;ITERATOR&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|*********************************************|
|                     DBIter                  |
|*********************************************|
|                 MergingIterator             | 
|*********************************************|
|     MemTableIterator |    TwoLevelIterator  |
|*********************************************|
|                      | LevelFileNumIterator |
|*********************************************|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MergingIterator吐出的是全版本, DBIter 执行了关键的FindNextUserEntry/FindPrevUserEntry, 进行 seq 过滤以及 相同user_key的 Entry hidden。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据在磁盘上的物理顺序为， order by user_key asc, seq desc。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MergingIterator 这一层注册了version 的 Unref callback, 即MergingIterator 析构时候触发。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;font color=&quot;red&quot;&gt;思考：&lt;/font&gt;

&lt;ol&gt;
  &lt;li&gt;TwoLevelIterator 的设计有点巧妙，其中用到了两层关系.
    &lt;ul&gt;
      &lt;li&gt;level files 抽象为Iterator， 通过level file iterator -&amp;gt;  file iterator(table iterator)。&lt;/li&gt;
      &lt;li&gt;table iterator 也是两级iterator，即通过 index_block_iterator -&amp;gt;  data_block_iterator。&lt;/li&gt;
      &lt;li&gt;其中Iterator 的Next / Prev 设计还是很巧妙的, 通过一个direction来标识当前的state是属于哪个方向的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;参考文献&quot;&gt;参考文献&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/leveldb/blob/master/doc/log_format.md&quot;&gt;Log format&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">DB</summary></entry></feed>